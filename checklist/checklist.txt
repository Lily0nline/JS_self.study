1. 전역변수와 지역변수의 차이를 명확히 알고 있는가

(1) 아래의 실행문 중 지역변수와 전역변수가 무엇인지 구분하고, 지역변수와 지역변수를 정의하세요.

	단, 여기서의 정의는 단순히 개념이 아닌 내가 이해하고 있는 언어로 바꾸어 정의할 것
	또한, 이렇게 나만의 바꾼 언어를 다른 사람도 이해가 가능한지 확인할 것
	이는 앞으로의 모든 정의 문제에 똑같이 적용됩니다.


let engine = false

function on() {
 let engine = true;
 return engine
}

console.log(on()) // 결과값은?
console.log(engine) // 결과값은?  
---------------------------------------

2. 전역변수를 활용하여 함수 설계를 할 수 있는가
    
(1) 자동차의 엔진 시동을 걸려고 합니다. 한번 시동을 킨 자동차는 다시 시동을 걸 수 없다고 하였을 때
아래의 결과가 나오도록 함수를 설계하고 구현해보세요

-- 올바른 경우 --
on()  // 시동이 걸렸습니다.
off() // 시동이 꺼져있습니다.
on() // 시동이 걸렸습니다.

-- 이미 엔진이 걸려있는 경우 --
on() // 시동이 걸렸습니다.
on() // 이미 시동이 걸려있습니다.
---------------------------------------

3. 분기점이 언제 생기는지 정의하고 구현할 수 있는가

(1) 자바스크립트에서 분기점을 구현하기 위해서는 어떠한 실행문을 응용할 수 있을까요?
(2) 자바스크립트에서 분기점이 생성되는 상황은 언제일까요?
	- 경우에 따라 값이 다를 때
  - 예외 상황을 처리해야할 때
   ....

    각 상황을 정의하고 예시를 하나씩 본인이 스스로 "상상"하여 구현해보세요
---------------------------------------


4. 배열에서 인덱스가 어느 순간 필요할지 정의할 수 있는가
    (1) 자바스크립트에서 배열은 어느 순간 사용하는게 올바를까요? 객체와 구분지어 설명해보세요.

(2) 배열에서의 인덱스는 특정 요소의 위치를 가르키기 위해 사용하며 해당 요소를 참조하여 
    특정 변수에 할당할 수도 있습니다. ( 복습 문제에도 관련 문제가 포함되어있어요! )

    배열에서 인덱스를 사용해야하는 순간은 언제일까요?

    이미지 케러셀, 슬라이드 베너와 같이 인덱스가 필요한 설계에 관하여 찾아보고
    해당 문항에서 왜 인덱스가 필요할지 정의해보세요.

    정확히는 배열에서의 인덱스의 역할을 깨닫는 것이 중요하며
    이를 어느 순간 활용해야할지 익숙해지는 것이 중요합니다.


(3) 빨,주,노,초,파,남,보 색상으로 변경이 가능한 "무지개"라는 텍스트가 있습니다.
    해당 텍스트는 생상 변경버턴을 누르면 위의 7가지 색이 순서대로 변경되어야합니다.

    무지개
    [변경버튼] <-- 클릭시 위의 무지개는 빨,주,노,초,파,남,보 색상으로 순서대로 변경되어야합니다.
						     보라색일 경우에는 다시 빨간색으로 돌아가야합니다 :)

	  위 문제를 풀이해보세요!
---------------------------------------

5. 콜백함수를 구분할 수 있는가
(1) 아직도 콜백함수가 무엇인지 모른다면 콜백함수 이해에 어떠한 것이 어려운 점이 있는지 확인해보세요.
    아래의 함수 중 콜백함수를 사용한 것과 콜백함수가 아닌 것을 구분해보세요.

---

	1-1)
			function f1(){
			}
	
			function 실행문(){
			 f1()
			}
	    실행문()
	
---

	1-2)
			function f1(e){
				console.log(e.currentTarget)
			}

			$dom.addEventListner(f1)

---

	1-3)
			array.map((el,index) => el+1)

---

  1-4)
		  function f1(number){
			}

			function 실행문(func){
				let a = 5;
				func(a)
			}
			실행문(f1)
---
---------------------------------------

6. 배열에서 순회문의 종류와 적절한 순간에 올바른 순회문을 적용할 수 있는가

(1) 배열의 순회문에는 어떤 종류가 있고 각 아래의 상황에 어떤 순회문을 사용하는게 좋을지 고민해보세요

		1-1) 모든 요소를 순회할 필요 없이 특정 조건의 인덱스만 순회하고 싶을 때 
		1-2) 모든 요소를 순회해야하지만 순회시 내 설계상 인덱스가 필요할 때 

		1-3) 모든 요소를 순회해야할 때 

		1-4) 객체의 키를 순회해서 객체의 모든 키 값에 접근해야할 때 

7. 나는 구현하기 전, 재사용될 수 있는 함수를 명확히 구분하고 풀이를 설계하고 있는가
이는 구현보다는 개념이 더 중요한 문제입니다.
본인이 함수를 설계할 때부터 재사용될 수 있는 함수는 무엇이 있는가 고민하고 이를 구분하여 사용해야합니다.
---------------------------------------

만약 본인이 스스로 함수를 설계할 수 있는 능력이 갖춰져있다면 설계 단계에서 재사용할 수 있는 함수가 있을지
고민해보는 것도 컴퓨터적인 사고 능력을 기르는데 굉장히 많은 도움이 될거에요 :)

8. 객체의 키와 값을 따로 빼내어 쓸 수 있는가, 객체는 어느 순간에 사용하는게 올바른가?

(1) 객체와 배열은 각각 어느 순간에 사용해야할까요 key와 index를 중심으로 정의해보세요 :D

(2) 아래의 object 관련 메서드들의 반환 값의 형태가 무엇인지 정의하고 모두 예시를 구현해보세요

		2-1) Object().values() 
	
		2-2) Obejct().keys()

		2-3) Obejct().entries() 
---------------------------------------

9. 배열의 고차함수는 어느 순간에 사용하는 것이 적절할까요


(1) map
	예를 들면 map은 각 요소를 순회하여 콜백함수가 반환하는 값을 새로운 배열로 만들어주는 메서드입니다.
	이를 이용하면 아래와 같은 상황을 생각할 수 있습니다.

		ex)
			const posts = [post1, post2, post3]
			
		  저는 이 posts 배열의 각 요소를 '<div></div>' html로 이루어진 string 배열로 구현할거에요!
		
			posts.map((post) => `<div>${post.title}</div>`)
		
			posts의 모든 요소를 순회하여 각 순회당 데이터를 콜백함수의 반환값인 
		  `<div>${post.title}</div>`로 변환하고자 합니다!
		
			위 실행문의 반환 값은 아래와 같습니다 :)
			['<div><div>', '<div><div>', '<div><div>']
	
			이를 join method를 활용하면 '<div></div><div></div><div></div>'의 형태로
			변환되고 이를 innerHTML로 보여줄 수도 있겠죠!?
			
			즉 map은 기본 배열을 다른 형태로 변환하거나 바꾸어 나타낼 때 많이 사용하며 주로 사용되는 곳은
		  Read, 배열의 각 요소 데이터를 파싱(가공)하여 다른 형태로 보여줄 때 사용합니다.
	


위의 방식에 맞춰 아래의 메서드들에도 예시를 생각해보며 직접 내가 구현하고자 싶은 함수를 상상하고
설계해보세요!

	find, findIndex, filter, sort, reduce, ....
---------------------------------------

10. 되돌아보기, 나는 문제를 풀기전 아웃풋을 먼저 연상하고 이를 통해 입력 값을 추론한 후 추론된 값을 토대로 한글로(구글링이 가능한 저레벨 수준 단위) 문제 풀이를 설계하고 있는가?
대부분의 분들이 설계하기를 어려워해 자꾸 정답 및 구현이 되는 것에 초점을 맞춰 문제를 풀이하게 됩니다.

이는 개발자로서 좋은 습관이 될 수 없어요!

만약 어려워서 안된다면 더 쉬운 것부터 연습하고 준비해서 내가 원하는 서비스를 설계 및 구현할 수 있는
개발자가 되보는 것은 어떨까요!?

충분한 사고와 설계가 어디에서나 사용 가능한 유연한 코드를 만드는데 큰 도움이 될거에요 :D
